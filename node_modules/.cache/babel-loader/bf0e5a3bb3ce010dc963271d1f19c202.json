{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\MERN Stack\\\\netflix\\\\netflix\\\\src\\\\Banner.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\";\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Banner() {\n  _s();\n\n  const [movie, setMovie] = useState([]);\n  const [show, setShow] = useState(false);\n  const [trailerUrl, setTrailerUrl] = useState();\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length - 1)]);\n    }\n\n    fetchData();\n  }, []);\n  console.log(movie);\n\n  function truncate(str, n) {\n    return (str === null || str === void 0 ? void 0 : str.length) > n ? str.substr(0, n - 1) + \" ...\" : str;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", show === false && /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"banner\",\n      style: {\n        backgroundSize: \"cover\",\n        backgroundImage: `url('https://image.tmdb.org/t/p/original/${movie === null || movie === void 0 ? void 0 : movie.backdrop_path}')`,\n        backgroundPosition: \"center center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"banner__contents\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"banner__title\",\n          children: (movie === null || movie === void 0 ? void 0 : movie.title) || (movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.original_name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"banner__buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"banner__button\",\n            onClick: () => {\n              setShow(!show);\n            },\n            children: \"Play\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"banner__button\",\n            children: \"My List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"banner__description\",\n          children: truncate(movie === null || movie === void 0 ? void 0 : movie.overview, 150)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"banner--fadeButton\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), show === true && /*#__PURE__*/_jsxDEV(\"header\", {\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Banner, \"0ixehozDC1NTxJrS381ITHQXvnY=\");\n\n_c = Banner;\nexport default Banner;\n\nvar _c;\n\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"sources":["D:/Projects/MERN Stack/netflix/netflix/src/Banner.js"],"names":["React","useState","useEffect","axios","requests","movieTrailer","Banner","movie","setMovie","show","setShow","trailerUrl","setTrailerUrl","fetchData","request","get","fetchNetflixOriginals","data","results","Math","floor","random","length","console","log","truncate","str","n","substr","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","movies","map","handleClick","base_url","isLargeRow","poster_path","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\nimport movieTrailer from \"movie-trailer\";\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n  const [trailerUrl, setTrailerUrl] = useState();\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  console.log(movie);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \" ...\" : str;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      {show === false && (\r\n        <header\r\n          className=\"banner\"\r\n          style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url('https://image.tmdb.org/t/p/original/${movie?.backdrop_path}')`,\r\n            backgroundPosition: \"center center\",\r\n          }}\r\n        >\r\n          <div className=\"banner__contents\">\r\n            {/* title */}\r\n            <h1 className=\"banner__title\">\r\n              {movie?.title || movie?.name || movie?.original_name}\r\n            </h1>\r\n            <div className=\"banner__buttons\">\r\n              <button\r\n                className=\"banner__button\"\r\n                onClick={() => {\r\n                  setShow(!show);\r\n                }}\r\n              >\r\n                Play\r\n              </button>\r\n              <button className=\"banner__button\">My List</button>\r\n            </div>\r\n            <h1 className=\"banner__description\">\r\n              {truncate(movie?.overview, 150)}\r\n            </h1>\r\n          </div>\r\n          {/* shading effect on the banner */}\r\n          <div className=\"banner--fadeButton\" />\r\n        </header>\r\n      )}\r\n      {show === true && <header>\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n        </header>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n"]},"metadata":{},"sourceType":"module"}