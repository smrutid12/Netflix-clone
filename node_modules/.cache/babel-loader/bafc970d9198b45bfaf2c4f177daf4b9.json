{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN Stack\\\\netflix\\\\netflix\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    } // console.log(fetchUrl);\n\n\n    fetchData();\n  }, [fetchUrl]); // console.table(movies);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters \",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: \"https://www.youtube.com/watch?v=BfsNfFoA0J0\",\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["D:/MERN Stack/netflix/netflix/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","opts","height","width","playerVars","autoplay","fetchData","request","get","data","results","map","movie","poster_path","backdrop_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,MAAMC,QAAQ,GAAG,qCAAjB;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAb,EAA8C;AAAA;;AAC5C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMW,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,MAFI;AAGXC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE;AADA;AAHD,GAAb;AAQAd,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAee,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAUX,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACO,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD,KALa,CAMd;;;AACAD,IAAAA,SAAS;AACV,GARQ,EAQN,CAACT,QAAD,CARM,CAAT,CAV4C,CAoB5C;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,gBAEGG,MAAM,CAACY,GAAP,CAAYC,KAAD,iBACV;AAEE,QAAA,GAAG,EAAG,GAAElB,QAAS,GACfI,UAAU,GAAGc,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACE,aACxC,EAJH;AAKE,QAAA,SAAS,EAAG,eAAchB,UAAU,IAAI,kBAAmB,EAL7D;AAME,QAAA,GAAG,EAAEc,KAAK,CAACG;AANb,SACOH,KAAK,CAACI,EADb;AAAA;AAAA;AAAA;AAAA,cADD;AAFH;AAAA;AAAA;AAAA;AAAA,YAFF,eAeE,QAAC,OAAD;AACE,MAAA,OAAO,EAAC,6CADV;AAEE,MAAA,IAAI,EAAEf;AAFR;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GA5CQN,G;;KAAAA,G;AA8CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\n\r\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    // console.log(fetchUrl);\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  // console.table(movies);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters \">\r\n        {/*Several row_posters  */}\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      <YouTube\r\n        videoId=\"https://www.youtube.com/watch?v=BfsNfFoA0J0\"\r\n        opts={opts}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}