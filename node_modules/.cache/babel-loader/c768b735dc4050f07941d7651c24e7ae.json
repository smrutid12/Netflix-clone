{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\MERN Stack\\\\netflix\\\\netflix\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]); // const [showError, setShowError] = useState();\n\n  const [trailerUrl, setTrailerUrl] = useState();\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    } // console.log(fetchUrl);\n\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    movieTrailer(null, {\n      tmdbId: movie.id\n    }).then(url => {\n      console.log(\"url is \" + url);\n      const urlParams = new URLSearchParams(new URL(url).search);\n      console.log(\"urlParamsn\" + urlParams);\n      setTrailerUrl(urlParams.get(\"v\"));\n    }).catch(error => setTrailerUrl(\"Error\"));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CloseIcon, {\n        style: {\n          top: \"0\",\n          float: \"right\",\n          cursor: \"pointer\"\n        },\n        onClick: () => {\n          setTrailerUrl(\"\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: trailerUrl,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"qs2XPHSvCxVW3dKJmgNZFcJJ2AU=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["D:/Projects/MERN Stack/netflix/netflix/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","CloseIcon","Tooltip","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","tmdbId","id","then","url","console","log","urlParams","URLSearchParams","URL","search","catch","error","map","poster_path","backdrop_path","name","top","float","cursor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  // const [showError, setShowError] = useState();\r\n  const [trailerUrl, setTrailerUrl] = useState();\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    // console.log(fetchUrl);\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  const handleClick = (movie) => {\r\n    movieTrailer(null, { tmdbId: movie.id })\r\n      .then((url) => {\r\n        console.log(\"url is \" + url);\r\n        const urlParams = new URLSearchParams(new URL(url).search);\r\n        console.log(\"urlParamsn\" + urlParams);\r\n        setTrailerUrl(urlParams.get(\"v\"));\r\n      })\r\n      .catch((error) => setTrailerUrl(\"Error\"));\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {/*Several row_posters  */}\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && (\r\n        <>\r\n          <CloseIcon\r\n            style={{ top: \"0\", float: \"right\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setTrailerUrl(\"\");\r\n            }}\r\n          />\r\n          <YouTube videoId={trailerUrl} opts={opts} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}