{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\MERN Stack\\\\netflix\\\\New folder\\\\netflix-clone\\\\src\\\\Row.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n// import Tooltip from \"@mui/material/Tooltip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\nfunction Row(_ref) {\n  _s();\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  // const [showError, setShowError] = useState();\n  const [trailerUrl, setTrailerUrl] = useState();\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    console.log(fetchUrl);\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  const handleClick = movie => {\n    movieTrailer(null, {\n      tmdbId: movie.id\n    }).then(url => {\n      console.log(\"url is \" + url);\n      const urlParams = new URLSearchParams(new URL(url).search);\n      console.log(\"urlParamsn\" + urlParams);\n      setTrailerUrl(urlParams.get(\"v\"));\n    }).catch(error => setTrailerUrl(\"Error\"));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: [movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)), trailerUrl === \"Error\" && console.log(\"Error\")\n      // <Tooltip title=\"Add\" placement=\"bottom\">\n      //   {movies.map((movie) => (\n      //     <img\n      //       key={movie.id}\n      //       onClick={() => handleClick(movie)}\n      //       src={`${base_url}${\n      //         isLargeRow ? movie.poster_path : movie.backdrop_path\n      //       }`}\n      //       className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n      //       alt={movie.name}\n      //     />\n      //   ))}\n      // </Tooltip>\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CloseIcon, {\n        style: {\n          top: \"0\",\n          float: \"right\",\n          cursor: \"pointer\"\n        },\n        onClick: () => {\n          setTrailerUrl(\"\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: trailerUrl,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Row, \"qs2XPHSvCxVW3dKJmgNZFcJJ2AU=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","axios","YouTube","movieTrailer","CloseIcon","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","console","log","opts","height","width","playerVars","autoplay","handleClick","movie","tmdbId","id","then","url","urlParams","URLSearchParams","URL","search","catch","error","map","poster_path","backdrop_path","name","top","float","cursor"],"sources":["D:/Projects/MERN Stack/netflix/New folder/netflix-clone/src/Row.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\n// import Tooltip from \"@mui/material/Tooltip\";\r\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  // const [showError, setShowError] = useState();\r\n  const [trailerUrl, setTrailerUrl] = useState();\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    console.log(fetchUrl);\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  const handleClick = (movie) => {\r\n    movieTrailer(null, { tmdbId: movie.id })\r\n      .then((url) => {\r\n        console.log(\"url is \" + url);\r\n        const urlParams = new URLSearchParams(new URL(url).search);\r\n        console.log(\"urlParamsn\" + urlParams);\r\n        setTrailerUrl(urlParams.get(\"v\"));\r\n      })\r\n      .catch((error) => setTrailerUrl(\"Error\"));\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {/*Several row_posters  */}\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n        {trailerUrl === \"Error\" && (\r\n          console.log(\"Error\")\r\n          // <Tooltip title=\"Add\" placement=\"bottom\">\r\n          //   {movies.map((movie) => (\r\n          //     <img\r\n          //       key={movie.id}\r\n          //       onClick={() => handleClick(movie)}\r\n          //       src={`${base_url}${\r\n          //         isLargeRow ? movie.poster_path : movie.backdrop_path\r\n          //       }`}\r\n          //       className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n          //       alt={movie.name}\r\n          //     />\r\n          //   ))}\r\n          // </Tooltip>\r\n        )}\r\n      </div>\r\n      {trailerUrl && (\r\n        <>\r\n          <CloseIcon\r\n            style={{ top: \"0\", float: \"right\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setTrailerUrl(\"\");\r\n            }}\r\n          />\r\n          <YouTube videoId={trailerUrl} opts={opts} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}